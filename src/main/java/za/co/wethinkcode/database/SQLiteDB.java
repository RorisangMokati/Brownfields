package za.co.wethinkcode.database;import net.lemnik.eodsql.QueryTool;import java.sql.*;import java.util.ArrayList;import java.util.List;public class SQLiteDB {    public static final String DATABASE_URL = "jdbc:sqlite:save_robot_world.db";    static {        createNewTables();    }    public static void createNewTables() {        String createWorldTableSQL = "CREATE TABLE IF NOT EXISTS Worlds (\n"                + "    id INTEGER PRIMARY KEY AUTOINCREMENT,\n"                + "    name TEXT NOT NULL,\n"                + "    size INTEGER NOT NULL,\n"                + "    obstacles TEXT NOT NULL\n"                + ");";        String createObstaclesTableSQL = "CREATE TABLE IF NOT EXISTS Obstacles (\n"                + "    id INTEGER PRIMARY KEY AUTOINCREMENT,\n"                + "    world_id INTEGER NOT NULL,\n"                + "    x INTEGER NOT NULL,\n"                + "    y INTEGER NOT NULL,\n"                + "    FOREIGN KEY(world_id) REFERENCES Worlds(id)\n"                + ");";        try (Connection conn = DriverManager.getConnection(DATABASE_URL);             Statement stmt = conn.createStatement()) {            stmt.execute(createWorldTableSQL);            stmt.execute(createObstaclesTableSQL);            System.out.println("Tables created successfully.");        } catch (SQLException e) {            System.out.println("Error creating tables: " + e.getMessage());        }    }    public static boolean worldNameExists(String worldName) {        try (Connection conn = DriverManager.getConnection(DATABASE_URL)) {            DataAccessInterface dao = QueryTool.getQuery(conn, DataAccessInterface.class);            WorldDO world = dao.getWorld(worldName);            return world != null;        } catch (SQLException e) {            System.out.println("Error checking world name existence: " + e.getMessage());        }        return false;    }    public static List<String> getWorldNames() {        List<String> worldNames = new ArrayList<>();        try (Connection conn = DriverManager.getConnection(DATABASE_URL)) {            DataAccessInterface dao = QueryTool.getQuery(conn, DataAccessInterface.class);            List<WorldDO> worlds = dao.getAllWorlds();            for (WorldDO world : worlds) {                worldNames.add(world.getName());            }        } catch (SQLException e) {            System.out.println("Error retrieving world names: " + e.getMessage());        }        return worldNames;    }    public static List<ObstacleDO> getObstacles(int worldId) {        String query = "SELECT * FROM Obstacles WHERE world_id = ?";        try (Connection conn = DriverManager.getConnection(DATABASE_URL);             PreparedStatement stmt = conn.prepareStatement(query)) {            stmt.setInt(1, worldId);            ResultSet rs = stmt.executeQuery();            List<ObstacleDO> obstacles = new ArrayList<>();            while (rs.next()) {                ObstacleDO obstacle = new ObstacleDO();                obstacle.setId(rs.getInt("id"));                obstacle.setWorldId(rs.getInt("world_id"));                obstacle.setX(rs.getInt("x"));                obstacle.setY(rs.getInt("y"));                obstacles.add(obstacle);            }            return obstacles;        } catch (SQLException e) {            System.out.println("Error retrieving obstacles: " + e.getMessage());        }        return new ArrayList<>();    }}